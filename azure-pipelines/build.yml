trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/*

variables:
  buildConfiguration: 'Release'
  nodeVersion: '18.x'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Frontend
    displayName: 'Build Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
    
    - script: |
        cd frontend
        npm ci
        npm run lint
        npm run type-check
        npm run build
      displayName: 'Frontend Build'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'frontend/dist'
        artifactName: 'frontend-build'
      displayName: 'Publish Frontend Artifacts'

  - job: Backend
    displayName: 'Build Backend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
    
    - script: |
        cd backend
        npm ci
        npm run lint
        npm test
      displayName: 'Backend Build and Test'
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'backend/test-results.xml'
      displayName: 'Publish Test Results'
    
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'backend/coverage/cobertura-coverage.xml'
      displayName: 'Publish Code Coverage'

- stage: Security
  displayName: 'Security Scan'
  dependsOn: Build
  jobs:
  - job: SecurityScan
    displayName: 'Security Analysis'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
    
    - script: |
        npm audit --audit-level moderate
        cd frontend && npm audit --audit-level moderate
        cd ../backend && npm audit --audit-level moderate
      displayName: 'NPM Security Audit'
    
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'esim-portal'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'esim-device-management-portal'
        cliProjectName: 'eSIM Device Management Portal'
      displayName: 'Prepare SonarCloud Analysis'
    
    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud Analysis'
    
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publish SonarCloud Results'

- stage: Package
  displayName: 'Package Application'
  dependsOn: 
  - Build
  - Security
  jobs:
  - job: Docker
    displayName: 'Build Docker Image'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'ACR Connection'
        repository: 'esim-portal'
        command: 'buildAndPush'
        Dockerfile: 'Dockerfile'
        tags: |
          $(Build.BuildId)
          latest
      displayName: 'Build and Push Docker Image'