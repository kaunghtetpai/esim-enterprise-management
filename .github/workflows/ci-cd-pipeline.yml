name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      - name: Run Dependency Check
        run: |
          npm audit --audit-level moderate
          npm audit fix --dry-run

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci
      
      - name: Lint Code
        run: |
          npm run lint
          cd frontend && npm run lint
          cd ../backend && npm run lint
      
      - name: Type Check
        run: |
          cd frontend && npm run type-check
          cd ../backend && npm run type-check
      
      - name: Run Tests
        run: |
          npm test -- --coverage --watchAll=false
          cd frontend && npm test -- --coverage --watchAll=false
          cd ../backend && npm test -- --coverage --watchAll=false
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info,./frontend/coverage/lcov.info,./backend/coverage/lcov.info

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci
      
      - name: Build Frontend
        run: |
          cd frontend
          npm run build
      
      - name: Build Backend
        run: |
          cd backend
          npm run build
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            frontend/dist/
            backend/dist/
          retention-days: 7

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Deploy to Vercel Preview
        run: |
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
      
      - name: Comment PR with Preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const url = fs.readFileSync('deployment-url.txt', 'utf8').trim();
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Preview deployment ready!\n\n**URL:** ${url}\n\n**Commit:** ${context.sha.substring(0, 7)}`
            });

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://esim-enterprise-management.vercel.app
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Deploy to Vercel Production
        id: deploy
        run: |
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
          echo "url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT
      
      - name: Health Check
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/health || exit 1
      
      - name: Update Custom Domain
        run: |
          vercel domains add portal.nexorasim.com --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel domains verify portal.nexorasim.com --token=${{ secrets.VERCEL_TOKEN }} || true

  post-deploy:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run System Health Check
        run: |
          curl -f https://esim-enterprise-management.vercel.app/api/v1/system/health
          curl -f https://portal.nexorasim.com/api/v1/system/health || true
      
      - name: Update Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              environment_url: 'https://esim-enterprise-management.vercel.app',
              description: 'Deployment successful'
            });
      
      - name: Notify Teams
        if: always()
        run: |
          echo "Deployment completed for commit ${{ github.sha }}"
          echo "Production URL: https://esim-enterprise-management.vercel.app"
          echo "Custom Domain: https://portal.nexorasim.com"

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Rollback Deployment
        run: |
          PREVIOUS_DEPLOYMENT=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep "READY" | head -2 | tail -1 | awk '{print $1}')
          vercel rollback $PREVIOUS_DEPLOYMENT --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Create Incident Issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Production Deployment Failed - ${context.sha.substring(0, 7)}`,
              body: `**Incident:** Production deployment failed and was rolled back.\n\n**Commit:** ${context.sha}\n**Workflow:** ${context.runId}\n**Time:** ${new Date().toISOString()}\n\n**Action Required:** Investigate and fix the deployment issue.`,
              labels: ['incident', 'deployment', 'critical']
            });

  monitoring:
    name: Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Monitor Deployment Health
        run: |
          for i in {1..10}; do
            echo "Health check attempt $i/10"
            if curl -f https://esim-enterprise-management.vercel.app/api/v1/system/health; then
              echo "✅ Health check passed"
              break
            else
              echo "❌ Health check failed, retrying in 30s..."
              sleep 30
            fi
            if [ $i -eq 10 ]; then
              echo "🚨 Health checks failed after 10 attempts"
              exit 1
            fi
          done
      
      - name: Performance Test
        run: |
          echo "Running basic performance tests..."
          time curl -s https://esim-enterprise-management.vercel.app/ > /dev/null
          time curl -s https://esim-enterprise-management.vercel.app/api/v1/system/status > /dev/null